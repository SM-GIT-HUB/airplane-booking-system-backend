```
async function createAirport(data)
{
    try {
        const airport = await airportRepository.create(data);
        return airport;
    }
    catch(err) {
        if (err.name.includes("Sequelize"))
        {
            let explanation = [];
            err.errors.forEach((e) => {
                explanation.push(e.message);
            })
            
            throw new AppError(explanation, StatusCodes.BAD_REQUEST);
        }

        throw new AppError(`Cannot create a new Airport Object: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function getAirports()
{
    try {
        const airports = await airportRepository.getAll();
        return airports;
    }
    catch(err) {
        throw new AppError(`Cannot fetch data of all airports: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function getAirport(id)
{
    try {
        const airport = await airportRepository.get(id);
        return airport;
    }
    catch(err) {
        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The airport you requested is not present", err.statusCode);
        }

        throw new AppError(`Cannot fetch data of airport: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function updateAirport(id, data)
{
    try {
        const airport = await airportRepository.update(id, data);
        return airport;
    }
    catch(err) {
        if (err.name.includes("Sequelize"))
        {
            let explanation = [];
            err.errors.forEach((e) => {
                explanation.push(e.message);
            })
            
            throw new AppError(explanation, StatusCodes.BAD_REQUEST);
        }

        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The airport you requested to update is not present", err.statusCode);
        }

        throw new AppError(`Cannot update data of airport: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function deleteAirport(id)
{
    try {
        const response = await airportRepository.destroy(id);
        return response;
    }
    catch(err) {
        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The airport you requested to delete is not present", err.statusCode);
        }

        throw new AppError(`Cannot delete airport: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}


module.exports = {
    createAirport,
    getAirports,
    getAirport,
    updateAirport,
    deleteAirport
}
```

```
async function createAirplane(data)
{
    try {
        const airplane = await airplaneRepository.create(data);
        return airplane;
    }
    catch(err) {
        if (err.name.includes("Sequelize"))
        {
            let explanation = [];
            err.errors.forEach((e) => {
                explanation.push(e.message);
            })
            
            throw new AppError(explanation, StatusCodes.BAD_REQUEST);
        }

        throw new AppError(`Cannot create a new Airplane Object: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function getAirplanes()
{
    try {
        const airplanes = await airplaneRepository.getAll();
        return airplanes;
    }
    catch(err) {
        throw new AppError(`Cannot fetch data of all airplanes: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function getAirplane(id)
{
    try {
        const airplane = await airplaneRepository.get(id);
        return airplane;
    }
    catch(err) {
        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The airplane you requested is not present", err.statusCode);
        }

        throw new AppError(`Cannot fetch data of airplane: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function updateAirplane(id, data)
{
    try {
        const airplane = await airplaneRepository.update(id, data);
        return airplane;
    }
    catch(err) {
        if (err.name.includes("Sequelize"))
        {
            let explanation = [];
            err.errors.forEach((e) => {
                explanation.push(e.message);
            })
            
            throw new AppError(explanation, StatusCodes.BAD_REQUEST);
        }

        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The airplane you requested to update is not present", err.statusCode);
        }

        throw new AppError(`Cannot update data of airplane: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function deleteAirplane(id)
{
    try {
        const response = await airplaneRepository.destroy(id);
        return response;
    }
    catch(err) {
        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The airplane you requested to delete is not present", err.statusCode);
        }

        throw new AppError(`Cannot delete airplane: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}


module.exports = {
    createAirplane,
    getAirplanes,
    getAirplane,
    updateAirplane,
    deleteAirplane
}
```

```
async function createCity(data)
{
    try {
        const city = await cityRepository.create(data);
        return city;
    }
    catch(err) {
        if (err.name.includes("Sequelize"))
        {
            let explanation = [];
            err.errors.forEach((e) => {
                explanation.push(e.message);
            })
            
            throw new AppError(explanation, StatusCodes.BAD_REQUEST);
        }

        throw new AppError(`Cannot create a new City Object: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function updateCity(id, data)
{
    try {
        const city = await cityRepository.update(id, data);
        return city;
    }
    catch(err) {
        if (err.name.includes("Sequelize"))
        {
            let explanation = [];
            err.errors.forEach((e) => {
                explanation.push(e.message);
            })
            
            throw new AppError(explanation, StatusCodes.BAD_REQUEST);
        }
        
        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The city you requested to update is not present", err.statusCode);
        }

        throw new AppError(`Cannot update data of city: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}

async function deleteCity(id)
{
    try {
        const response = await cityRepository.destroy(id);
        return response;
    }
    catch(err) {
        if (err.statusCode == StatusCodes.NOT_FOUND) {
            throw new AppError("The city you requested to delete is not present", err.statusCode);
        }

        throw new AppError(`Cannot delete city: ${err.message}`, StatusCodes.INTERNAL_SERVER_ERROR);
    }
}


module.exports = {
    createCity,
    updateCity,
    deleteCity
}
```

